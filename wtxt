#pragma once

#define WIN32_LEAN_AND_MEAN
#include <windows.h>

//#pragma warning( disable : 5045 )

//#include <sddb>

#ifdef DEBUG
#pragma comment( lib, "wtxtd" )
#else
#pragma comment( lib, "wtxt" )
#endif

typedef unsigned long long int ui64;
typedef signed long long int i64;
typedef unsigned int ui32;
typedef signed int i32;
typedef unsigned short int ui16;
typedef signed short int i16;
typedef unsigned char ui8;
typedef signed char i8;

typedef unsigned long int uli32;
typedef signed long int li32;

#ifndef TXT_MULTI_THREAD_MODE
#define HEAP_FLAGS HEAP_NO_SERIALIZE
#else
#define HEAP_FLAGS 0
#endif

#define WTXT_UTF16

#define NFND 0xFFFFFFFFFFFFFFFF // Text was not found
#define RALL 0xFFFFFFFFFFFFFFFF // Replace everything from pos to end of text
#define DALL 0xFFFFFFFFFFFFFFFF // Delete everything from pos to end of text
#define TEND 0xFFFFFFFFFFFFFFFF // Text MAX end position
#define TXT_CONCAT_MULT 2

#define EXCEPTION_TXTI_BUFF_OVERRUN 0xE0000001
#define EXCEPTION_TXTO_BUFF_OVERRUN 0xE0000002
#define EXCEPTION_T2I_NON_NUMBER    0xE0000003
#define EXCEPTION_H2I_NON_NUMBER    0xE0000004
#define EXCEPTION_T2I_OVERFLOW      0xE0000005
#define EXCEPTION_H2I_OVERFLOW      0xE0000006

#define EXCEPT_TXT_UTF8  0
#define EXCEPT_TXT_UTF16 1

class wtxt
{
public:
	wtxt();
	wtxt(const wtxt &o);
	wtxt(wtxt &&o);
	wtxt(const wchar_t *cs);
	wtxt(char c);
	wtxt(wchar_t wc);
	wtxt(ui64 ui);
	wtxt(i64 i);
	wtxt(i32 i);
	
	~wtxt();
	
	wtxt & operator=(const wtxt &o);
	wtxt & operator=(wtxt &&o);
	wtxt & operator=(const wchar_t *cs);
	wtxt & operator=(char c);
	wtxt & operator=(wchar_t wc);
	wtxt & operator=(ui64 ui);
	wtxt & operator=(i64 i);
	wtxt & operator=(i32 i);
	
	wchar_t & operator[](ui64 i);
	const wchar_t & operator[](ui64 i) const;
	
	wtxt & operator+=(const wtxt &o);
	wtxt & operator+=(const wchar_t *cs);
	wtxt & operator+=(wchar_t c);
	
	operator const wchar_t *() const;
	operator wchar_t *();
	
	ui64 operator~() const;	// Size operator
	uli32 * operator*();	// Size modification operator
	ui64 operator!() const;	// True Size Operator
	wtxt & operator++();	// Size update operator
	wtxt & operator--();	// Trimm operator
	
	friend bool operator==(const wtxt &t0, const wtxt &t1);
	friend bool operator!=(const wtxt &t0, const wtxt &t1);
	friend bool operator==(const wtxt &t, const wchar_t *cs);
	friend bool operator!=(const wtxt &t, const wchar_t *cs);
	friend bool operator==(const wchar_t *cs, const wtxt &t);
	friend bool operator!=(const wchar_t *cs, const wtxt &t);
	friend bool operator==(const wtxt &t, wchar_t c);
	friend bool operator!=(const wtxt &t, wchar_t c);
	friend bool operator==(wchar_t c, const wtxt &t);
	friend bool operator!=(wchar_t c, const wtxt &t);
	friend bool operator==(const wtxt &t, void (*empty_func)(void));
	friend bool operator!=(const wtxt &t, void (*empty_func)(void));
	friend bool operator==(void (*empty_func)(void), const wtxt &t);
	friend bool operator!=(void (*empty_func)(void), const wtxt &t);
	friend ui64 operator>>(const wtxt &fnd, const wtxt &t);
	friend ui64 operator>>(const wchar_t *fnd, const wtxt &t);
	friend ui64 operator>>(wchar_t fnd, const wtxt &t);
	friend ui64 operator<<(const wtxt &fnd, const wtxt &t);
	friend ui64 operator<<(const wchar_t *fnd, const wtxt &t);
	friend ui64 operator<<(wchar_t fnd, const wtxt &t);
	friend ui64 txtf(const wtxt &t, ui64 pos, const wtxt &fnd);
	friend ui64 txtf(const wtxt &t, ui64 pos, const wchar_t *fnd);
	friend ui64 txtf(const wtxt &t, ui64 pos, wchar_t fnd);
	friend ui64 txtfe(const wtxt &t, ui64 pos, const wtxt &fnd);
	friend ui64 txtfe(const wtxt &t, ui64 pos, const wchar_t *fnd);
	friend ui64 txtfe(const wtxt &t, ui64 pos, wchar_t fnd);
	friend wtxt & txti(wtxt &t, ui64 pos,  const wtxt &ins);
	friend wtxt & txti(wtxt &t, ui64 pos,  const wchar_t *ins);
	friend wtxt & txti(wtxt &t, ui64 pos,  wchar_t ins);
	friend wtxt & txto(wtxt &t, ui64 pos,  const wtxt &ovr);
	friend wtxt & txto(wtxt &t, ui64 pos,  const wchar_t *ovr);
	friend wtxt & txto(wtxt &t, ui64 pos,  wchar_t ovr);
	friend ui64 t2i(const wtxt &t);
	friend ui64 h2i(const wtxt &t);
	friend wtxt & txtr(wtxt &t, ui64 pos, ui64 n, const wtxt &rep);
	friend wtxt & txtr(wtxt &t, ui64 pos, ui64 n, const wchar_t *rep);
	friend wtxt & txtr(wtxt &t, ui64 pos, ui64 n, wchar_t rep);
	friend wtxt & txtd(wtxt &t, ui64 pos, ui64 n);
	friend wtxt txts(const wtxt &t, ui64 pos, ui64 n);
	friend wtxt txtsp(const wtxt &t, ui64 p0, ui64 p1);
	
private:
	static ui64 Sl(const wchar_t *cs);
	static wchar_t * AllocTmp(ui64 s, ui64 *nts);
	void Alloc(ui64 s);
	wtxt & Move(wtxt &o);
	void ExceptBuff(DWORD c, ui64 pos) const;
	void ExceptNum(DWORD c) const;
	
private:
	static HANDLE h;
	ui64 ts;
	ui64 s;
	wchar_t *t;
};

inline wtxt::wtxt()
{
	s = 0;
	Alloc(0);
}

inline wtxt::wtxt(const wtxt &o)
{
	s = o.s;
	Alloc(s);
	memcpy(t, o.t, s * sizeof(wchar_t));
}

inline wtxt::wtxt(wtxt &&o)
{
	ts = o.ts;
	s = o.s;
	t = o.t;
	o.ts = 0;
	o.s = 0;
	o.t = NULL;
}

inline wtxt::wtxt(const wchar_t *cs) // x4.28 VS STD Allocating Big Strings Test
{
	s = Sl(cs);
	Alloc(s);
	memcpy(t, cs, s * sizeof(wchar_t));
}

inline wtxt::wtxt(char c) // x2.75 VS STD
{
	s = 1;
	Alloc(1);
	t[0] = c;
}

inline wtxt::wtxt(wchar_t wc)
{
	s = 1;
	Alloc(1);
	t[0] = wc;
}

inline wtxt::wtxt(ui64 ui)
{
	s = 0;
	Alloc(ui);
}

inline wtxt::wtxt(i64 i)
{
	s = 0;
	Alloc(i & 0x8000000000000000 ? 0ull : (ui64)i);
}

inline wtxt::wtxt(i32 i)
{
	s = 0;
	Alloc(i & 0x80000000 ? 0ull : (ui64)i);
}

inline wtxt::~wtxt()
{
	if(ts > 0x400)
	{
		VirtualFree(t, 0, MEM_RELEASE);
	}
	else
	{
		HeapFree(h, 0, t);
	}
}

inline wtxt & wtxt::operator=(const wtxt &o)
{
	if(ts <= o.s)
	{
		this->wtxt::~wtxt();
		Alloc(o.s);
	}
	s = o.s;
	memcpy(t, o.t, s * sizeof(wchar_t));
	t[s] = 0;
	
	return *this;
}

inline wtxt & wtxt::operator=(wtxt &&o)
{
	ts = o.ts;
	s = o.s;
	t = o.t;
	o.ts = 0;
	o.s = 0;
	o.t = NULL;
	
	return *this;
}

inline wtxt & wtxt::operator=(const wchar_t *cs)
{
	ui64 ss = Sl(cs);  // -------+
	if(ts <= ss)       //        |
	{                  //        |
		this->wtxt::~wtxt();  //   |
		Alloc(ss);  // <---------+------ I copypasted and forgot to put ss here instead of s...
	}
	s = ss;
	memcpy(t, cs, s * sizeof(wchar_t));
	t[s] = 0;
	
	return *this;
}

inline wtxt & wtxt::operator=(char c)
{
	s = 1;
	t[0] = c;
	t[1] = 0;
	
	return *this;
}

inline wtxt & wtxt::operator=(wchar_t wc)
{
	s = 1;
	t[0] = wc;
	t[1] = 0;
	
	return *this;
}

inline wtxt & wtxt::operator=(ui64 ui)
{
	if(ts < ui+1)
	{
		this->wtxt::~wtxt();
		Alloc(ui);
	}
	else
	{
		t[0] = 0;
	}
	
	s = 0;
	
	return *this;
}

inline wtxt & wtxt::operator=(i64 i)
{
	return operator=(i & 0x8000000000000000 ? 0ull : (ui64)i);
}

inline wtxt & wtxt::operator=(i32 i)
{
	return operator=(i & 0x80000000 ? 0ull : (ui64)i);
}

inline wchar_t & wtxt::operator[](ui64 i)
{
	return t[i];
}

inline const wchar_t & wtxt::operator[](ui64 i) const
{
	return t[i];
}

inline wtxt::operator const wchar_t *() const
{
	return (const wchar_t *)t;
}

inline wtxt::operator wchar_t *()
{
	return t;
}

inline ui64 wtxt::operator~() const
{
	return s;
}

inline uli32 * wtxt::operator*()
{
	return (uli32 *)(&s);
}

inline ui64 wtxt::operator!() const
{
	return ts;
}

inline wtxt & wtxt::operator++()
{
	s = wtxt::Sl(t);
	return *this;
}

inline ui64 wtxt::Sl(const wchar_t *cs)
{
	const wchar_t *sbeg = cs--;
	while(*(++cs) != 0)
	{
		;
	}
	
	return ui64(cs - sbeg);
}

inline void wtxt::Alloc(ui64 sz)
{
	if(++sz > 0x200) // ++ to account for \0 char!
	{
		ts = sz; // VirtualAlloc will zero memory by default
		t = (wchar_t *)VirtualAlloc(NULL, ts * sizeof(wchar_t), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	}
	else
	{
		ts = sz + (0x4 - sz % 0x4);// MSVC Optim.: and rax, -4
		// lea  r8, QWORD PTR [rax+4]
		t = (wchar_t *)HeapAlloc(h, HEAP_ZERO_MEMORY, ts * sizeof(wchar_t));
	}
}

inline wchar_t * wtxt::AllocTmp(ui64 sz, ui64 *nts)
{
	if(++sz > 0x200) // ++ to account for \0 char!
	{
		*nts = sz;
		return (wchar_t *)VirtualAlloc(NULL, *nts * sizeof(wchar_t), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	}
	else
	{
		*nts = sz + (0x4 - sz % 0x4);// MSVC Optim.: and rax, -4
		// lea  r8, QWORD PTR [rax+4]
		return (wchar_t *)HeapAlloc(h, HEAP_ZERO_MEMORY, *nts * sizeof(wchar_t));
	}
}

inline wtxt & wtxt::Move(wtxt &o)
{
	ts = o.ts;
	s = o.s;
	t = o.t;
	o.ts = 0;
	o.s = 0;
	o.t = NULL;
	
	return *this;
}

inline wtxt operator+(wtxt t0, const wtxt &t1)
{
	return t0 += t1;
}

inline wtxt operator+(const wchar_t *cs, const wtxt &t)
{
	return wtxt(cs) += t;
}

inline wtxt operator+(wtxt t, const wchar_t *cs)
{
	return t += cs;
}

inline wtxt operator+(wchar_t c, const wtxt &t)
{
	return wtxt(c) += t;
}

inline wtxt operator+(wtxt t, wchar_t c)
{
	return t += c;
}

inline bool operator==(const wtxt &t0, const wtxt &t1)
{
	return t0.s == t1.s ? !memcmp(t0.t, t1.t, t0.s * sizeof(wchar_t)) : false;
}

inline bool operator!=(const wtxt &t0, const wtxt &t1)
{
	return t0.s != t1.s ? true : (bool)memcmp(t0.t, t1.t, t0.s * sizeof(wchar_t));
}

inline bool operator==(const wchar_t *cs, const wtxt &t)
{
	ui64 ss = wtxt::Sl(cs);
	return ss == t.s ? !memcmp(cs, t.t, ss * sizeof(wchar_t)) : false;
}

inline bool operator!=(const wchar_t *cs, const wtxt &t)
{
	ui64 ss = wtxt::Sl(cs);
	return ss != t.s ? true : (bool)memcmp(cs, t.t, ss * sizeof(wchar_t));
}

inline bool operator==(const wtxt &t, const wchar_t *cs)
{
	ui64 ss = wtxt::Sl(cs);
	return ss == t.s ? !memcmp(cs, t.t, ss * sizeof(wchar_t)) : false;
}

inline bool operator!=(const wtxt &t, const wchar_t *cs)
{
	ui64 ss = wtxt::Sl(cs);
	return ss != t.s ? true : (bool)memcmp(cs, t.t, ss * sizeof(wchar_t));
}

inline bool operator==(const wtxt &t, wchar_t c)
{
	return t.t[0] == c && t.s == 1;
}

inline bool operator!=(const wtxt &t, wchar_t c)
{
	return t.t[0] != c || t.s != 1;
}

inline bool operator==(wchar_t c, const wtxt &t)
{
	return t.t[0] == c && t.s == 1;
}

inline bool operator!=(wchar_t c, const wtxt &t)
{
	return t.t[0] != c || t.s != 1;
}

#pragma warning( suppress : 4100 ) // 'empty_func': unreferenced formal parameter
inline bool operator==(const wtxt &t, void (*empty_func)(void))
{
	return t.s == 0;
}

#pragma warning( suppress : 4100 )
inline bool operator!=(const wtxt &t, void (*empty_func)(void))
{
	return t.s != 0;
}

#pragma warning( suppress : 4100 )
inline bool operator==(void (*empty_func)(void), const wtxt &t)
{
	return t.s == 0;
}

#pragma warning( suppress : 4100 )
inline bool operator!=(void (*empty_func)(void), const wtxt &t)
{
	return t.s != 0;
}

inline wtxt & txto(wtxt &t, ui64 pos, wchar_t ovr)
{
	if(pos >= t.s)
	{
		t.ExceptBuff(EXCEPTION_TXTO_BUFF_OVERRUN, pos);
		return t;
	}
	
	t.t[pos] = ovr;

	return t;
}

wtxt i2wt(ui64 i);
wtxt i2wt(ui32 i);
wtxt i2wt(i64 i);
wtxt i2wt(i32 i);
wtxt i2wh(ui64 i);
wtxt i2wh(ui32 i);
wtxt i2wh(ui16 i);
wtxt i2wh(ui8 i);

inline wtxt i2wt(uli32 i)
{
	return i2wt((ui32)i);
}

inline wtxt i2wt(li32 i)
{
	return i2wt((i32)i);
}

inline wtxt i2wh(uli32 i)
{
	return i2wh((ui32)i);
}

#ifndef TXT_UTF8
inline void empty() {}
#endif